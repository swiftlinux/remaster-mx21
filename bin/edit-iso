#!/bin/bash

# NOTE: set -o pipefail is needed to ensure that any error or failure causes the whole pipeline to fail.
# Without this specification, the CI status will provide a false sense of security by showing builds
# as succeeding in spite of errors or failures.
set -eo pipefail

echo '##############################################################'
echo 'BEGIN STAGE 8: customizing the Swift Linux ISO component files'
echo '##############################################################'

DATE1=$(date +%s)

source definitions.sh

echo '------------------------'
echo "cat $DIR_ISO_NEW/version"
cat $DIR_ISO_NEW/version
echo ''

echo '---------------------------'
echo "cat $DIR_ISO_NEW/.disk/info"
cat $DIR_ISO_NEW/.disk/info
echo ''

# Listing the files containing certain strings of interest
wait
bin/string-in-directory 'list' "$DIR_ISO_NEW" "MX-$MX_VERSION$STR64"
bin/string-in-directory 'list' "$DIR_ISO_NEW" "MX-$MX_VERSION"
bin/string-in-directory 'list' "$DIR_ISO_NEW" "$MX_CODE_NAME"
bin/string-in-directory 'list' "$DIR_ISO_NEW" "$MX_DATE"
bin/string-in-directory 'list' "$DIR_ISO_NEW" 'MX Linux'
bin/string-in-directory 'list' "$DIR_ISO_NEW" 'MX'

# Replacing MX-$MX_VERSION_x64
wait
STRING1="MX-$MX_VERSION$STR64"
STRING2="$EDITION_LONG $SWIFT_VERSION x64"
bin/string-in-directory 'replace' "$DIR_ISO_NEW" "$STRING1" "$STRING2"
bin/string-in-directory 'error-if-present' "$DIR_ISO_NEW" "$STRING1"

# Replacing MX-$MX_VERSION
wait
STRING1="MX-$MX_VERSION"
STRING2="$EDITION_LONG $SWIFT_VERSION"
bin/string-in-directory 'replace' "$DIR_ISO_NEW" "$STRING1" "$STRING2"
bin/string-in-directory 'error-if-present' "$DIR_ISO_NEW" "$STRING1"

# Replacing $MX_CODE_NAME
wait
STRING1="$MX_CODE_NAME"
STRING2="$TIME_STAMP"
bin/string-in-directory 'replace' "$DIR_ISO_NEW" "$STRING1" "$STRING2"
bin/string-in-directory 'error-if-present' "$DIR_ISO_NEW" "$STRING1"

# Replacing $MX_DATE
wait
STRING1="$MX_DATE"
STRING2="$TIME_STAMP"
bin/string-in-directory 'replace' "$DIR_ISO_NEW" "$STRING1" "$STRING2"
bin/string-in-directory 'error-if-present' "$DIR_ISO_NEW" "$STRING1"

# Checking that the previous string replacement actions worked
bin/string-in-file 'error-if-absent' "$DIR_ISO_NEW/boot/syslinux/syslinux.cfg" "Welcome to $EDITION_LONG $SWIFT_VERSION ($TIME_STAMP)"

# Replacing 'MX Linux'
wait
STRING1='MX Linux'
STRING2="$EDITION_LONG"
bin/string-in-directory 'replace' "$DIR_ISO_NEW" "$STRING1" "$STRING2"
bin/string-in-directory 'error-if-present' "$DIR_ISO_NEW" "$STRING1"

# Replacing 'version of MX'
wait
STRING1='version of MX'
STRING2="version of $EDITION_LONG"
bin/string-in-directory 'replace' "$DIR_ISO_NEW" "$STRING1" "$STRING2"
bin/string-in-directory 'error-if-present' "$DIR_ISO_NEW" "$STRING1"

# Replacing 'distro="MX"'
wait
STRING1='distro="MX"'
STRING2="distro=$QUOTE2$EDITION_LONG$QUOTE2"
bin/string-in-directory 'replace' "$DIR_ISO_NEW" "$STRING1" "$STRING2"
bin/string-in-directory 'error-if-present' "$DIR_ISO_NEW" "$STRING1"

# Updating $DIR_ISO_NEW/version and $DIR_ISO_NEW/.disk/info
wait
bin/distro-info-in-file "$DIR_ISO_NEW/version"
bin/distro-info-in-file "$DIR_ISO_NEW/.disk/info"

# Listing the files containing $EDITION_LONG, $SWIFT_VERSION, $TIME_STAMP
wait
bin/string-in-directory 'list' "$DIR_ISO_NEW" 'MX'
bin/string-in-directory 'list' "$DIR_ISO_NEW" "$EDITION_LONG"
bin/string-in-directory 'list' "$DIR_ISO_NEW" "$SWIFT_VERSION"
bin/string-in-directory 'list' "$DIR_ISO_NEW" "$TIME_STAMP"

DATE2=$(date +%s)

echo '######################################################################################'
echo "FINISHED 8: customizing the Swift Linux ISO component files ($((DATE2-DATE1)) seconds)"
echo '######################################################################################'
