#!/bin/bash

# NOTE: set -o pipefail is needed to ensure that any error or failure causes the whole pipeline to fail.
# Without this specification, the CI status will provide a false sense of security by showing builds
# as succeeding in spite of errors or failures.
set -eo pipefail

echo '##############################'
echo 'BEGIN STAGE 2: downloading ISO'
echo '##############################'

DATE1=$(date +%s)

source definitions.sh

MX_VERSION=`cat parameters/MX-version.txt`

# List of MX Linux download mirrors:
# https://mxlinux.org/wiki/system/iso-download-mirrors/

# NOTE: Downloads from SourceForge are often slow.
# I prefer to rely on mirror sites, because the downloads are faster.
# This script randomly chooses one of out several mirror sites.
# This ensures that a successful download happens sooner or later.
# Mirror sites that prove to be unreliable or slow can be removed
# from the file specified below.
BASE_URL=`shuf -n 1 $DIR_MAIN/parameters/download-mirrors.txt`

SHA256_URL="$BASE_URL/MX-$MX_VERSION"_x64.iso.sha256
SHA256_FILENAME='iso-downloaded/sha256.txt'
ISO_URL="$BASE_URL/MX-$MX_VERSION"_x64.iso
ISO_FILENAME="$CD_VIRTUAL"

function download_file () {
  URL_TO_DOWNLOAD=$1
  PATH_TO_FILE=$2
  rm -rf download
  wait
  rm -rf download.*
  wait
  mkdir -p 'iso-downloaded'
  wait
  echo '---------------------------------------------------------'
  echo "BEGIN: downloading from $URL_TO_DOWNLOAD to $PATH_TO_FILE"
  echo '---------------------------------------------------------'
  wget -c "$URL_TO_DOWNLOAD" --progress=dot -e dotbytes=10M -O "$PATH_TO_FILE"
  wait
  echo '---------------------------------------------------------'
  echo "FINISHED: downloading from $URL_TO_DOWNLOAD to $PATH_TO_FILE"
  echo '---------------------------------------------------------'
}

function download_sha256 () {
  # Delete the old SHA256 file (may be outdated)
  rm -f $SHA256_FILENAME
  wait
  download_file "$SHA256_URL" "$SHA256_FILENAME"
  wait
}

function download_iso_file () {
  download_file "$ISO_URL" "$ISO_FILENAME"
  wait
}

function check_iso () {
  echo 'Checking files'
  SHA256_EXPECTED_LONG=`cat $SHA256_FILENAME`
  SHA256_EXPECTED=${SHA256_EXPECTED_LONG:0:64} # First 64 characters only
  echo "Expected SHA256 value: $SHA256_EXPECTED"
  
  SHA256_ACTUAL_LONG=`sha256sum $ISO_FILENAME`
  SHA256_ACTUAL=${SHA256_ACTUAL_LONG:0:64} # First 64 characters only
  echo "Actual SHA256 value: $SHA256_ACTUAL"

  if [ "$SHA256_EXPECTED" = "$SHA256_ACTUAL" ]
  then
    FINISHED='true'
    echo 'The input ISO file is ready.'
  else
    echo 'The input ISO file is not ready.'
  fi
}

FINISHED='false'
i=0

# Stage 2A: downloading the SHA256 file
download_sha256

# Repeat until the ISO file has the right SHA256 value
# or 3 unsuccessful attempts have been made,
# whichever comes first.
while [[ "$FINISHED" = 'false' && $i -lt 4 ]]
do
  # Stage 2B: downloading the ISO file (if it is not already present)
  if ! test -f "$ISO_FILENAME"
  then
    rm -rf $DIR_REMASTER
    download_iso_file
  fi

  # Stage 2C: checking the SHA256 value of the ISO file and
  # (if necessary) downloading a new ISO file
  check_iso
  ((i=i+1))
done

# Throw error code if the process did not pan out.
if [ "$FINISHED" = 'false' ]
then
  echo "The download from $URL_TO_DOWNLOAD failed.  Try again later."
  exit 1
else
  echo "Successfully downloaded from $SHA256_URL to $SHA256_FILENAME"
  echo '--------------------'
  echo "cat $SHA256_FILENAME"
  cat "$SHA256_FILENAME"
  echo ''
  echo '--------------------'
  echo 'ls -l iso-downloaded'
  ls -l iso-downloaded
fi

DATE2=$(date +%s)

echo '############################################################'
echo "FINISHED STAGE 2: downloading ISO ($((DATE2-DATE1)) seconds)"
echo '############################################################'
