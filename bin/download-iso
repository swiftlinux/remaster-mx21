#!/bin/bash

# NOTE: set -o pipefail is needed to ensure that any error or failure causes the whole pipeline to fail.
# Without this specification, the CI status will provide a false sense of security by showing builds
# as succeeding in spite of errors or failures.
set -eo pipefail

echo '##############################'
echo 'BEGIN STAGE 2: downloading ISO'
echo '##############################'

DATE1=$(date +%s)

source definitions.sh

SHA256_FILENAME="$SHA256_CD_VIRTUAL"
ISO_FILENAME="$CD_VIRTUAL"

BASE_URL=''
SHA256_URL=''
ISO_URL=''''

# List of MX Linux download mirrors:
# https://mxlinux.org/wiki/system/iso-download-mirrors/

# NOTE: Downloads from SourceForge are often slow.
# I prefer to rely on mirror sites, because the downloads are faster.
# This script randomly chooses one of out several mirror sites.
# This ensures that a successful download happens sooner or later.
# Mirror sites that prove to be unreliable or slow can be removed
# from the file specified below.
function change_mirror () {
  BASE_URL=`shuf -n 1 $DIR_MAIN/parameters/download-mirrors.txt`
  SHA256_URL="$BASE_URL/MX-$MX_VERSION"_x64.iso.sha256
  ISO_URL="$BASE_URL/MX-$MX_VERSION"_x64.iso
}

function download_file () {
  URL_TO_DOWNLOAD=$1
  PATH_TO_FILE=$2
  rm -rf download
  wait
  rm -rf download.*
  wait
  mkdir -p 'iso-downloaded'
  wait
  echo '---------------------------------------------------------'
  echo "BEGIN: downloading from $URL_TO_DOWNLOAD to $PATH_TO_FILE"
  echo '---------------------------------------------------------'
  wget "$URL_TO_DOWNLOAD" --progress=dot -e dotbytes=10M -O "$PATH_TO_FILE"
  wait
  echo '------------------------------------------------------------'
  echo "FINISHED: downloading from $URL_TO_DOWNLOAD to $PATH_TO_FILE"
  echo '------------------------------------------------------------'
  # Delete the new file if it is empty.
  # Not having this step for the SHA256 file leads to an empty file.
  # This makes it impossible to verify that the ISO has the correct SHA256 value
  # and leads to a false error.
  [ -s "$PATH_TO_FILE" ] || rm "$PATH_TO_FILE" 
}

function download_sha256 () {
  # Delete the old SHA256 file (may be outdated)
  rm -f $SHA256_FILENAME
  wait
  change_mirror
  download_file "$SHA256_URL" "$SHA256_FILENAME"
  wait
}

function download_iso_file () {
  wait
  # Switch to a different mirror if the download fails
  download_file "$ISO_URL" "$ISO_FILENAME"
  wait
}

function check_iso () {
  echo 'Checking files'
  SHA256_EXPECTED_LONG=`cat $SHA256_FILENAME`
  SHA256_EXPECTED=${SHA256_EXPECTED_LONG:0:64} # First 64 characters only
  echo "Expected SHA256 value: $SHA256_EXPECTED"
  
  SHA256_ACTUAL_LONG=`sha256sum $ISO_FILENAME`
  SHA256_ACTUAL=${SHA256_ACTUAL_LONG:0:64} # First 64 characters only
  echo "Actual SHA256 value: $SHA256_ACTUAL"

  if [ "$SHA256_EXPECTED" = "$SHA256_ACTUAL" ]
  then
    FINISHED='true'
    echo 'The input ISO file is ready.'
  else
    echo 'The input ISO file is not ready.'
    ((i=i+1))
  fi
}

# Stage 2A: downloading the SHA256 file
# Repeat until the ISO file has the right SHA256 value
# or 10 unsuccessful attempts have been made,
# whichever comes first.

echo '+++++++++++++++++++++++++++++++++++++++++++'
echo 'BEGIN STAGE 2A: downloading the SHA256 file'
echo '+++++++++++++++++++++++++++++++++++++++++++'

FINISHED='false'
i=0
while [[ "$FINISHED" = 'false' && $i -lt 10 ]]
do
  if download_sha256; then
    # If download succeeds
    FINISHED='true'
  else
    # if download fails
    echo 'This attempt to download the SHA256 file did not pan out.'
    ((i=i+1))
  fi
done

echo '--------------------'
echo 'ls -l iso-downloaded'
ls -l iso-downloaded

if [[ "$FINISHED" = 'false' ]]
then
  echo 'The attempts to download the SHA256 file did not pan out.'
  echo 'Try again later.'
  exit 1
fi

echo '++++++++++++++++++++++++++++++++++++++++++++++'
echo 'FINISHED STAGE 2A: downloading the SHA256 file'
echo '++++++++++++++++++++++++++++++++++++++++++++++'

# Stage 2B: downloading the ISO file (if necessary)
# Repeat until the ISO file has the right SHA256 value
# or 10 unsuccessful attempts have been made,
# whichever comes first.

# Repeat until the ISO file has the right SHA256 value
# or 10 unsuccessful attempts have been made,
# whichever comes first.

echo '++++++++++++++++++++++++++++++++++++++++++++++++++++++'
echo 'BEGIN STAGE 2B: downloading and verifying the ISO file'
echo '++++++++++++++++++++++++++++++++++++++++++++++++++++++'

FINISHED='false'
i=0
while [[ "$FINISHED" = 'false' && $i -lt 10 ]]
do
  if ! test -f "$ISO_FILENAME"
  then
    rm -rf "$DIR_REMASTER"
    if download_iso_file; then
      check_iso
    else
      echo 'This attempt to download the ISO file did not pan out.'
      ((i=i+1))
    fi
  else
    check_iso
  fi
done

# Throw error code if the process did not pan out.
if [ "$FINISHED" = 'false' ]
then
  echo 'The attempts to download the ISO file did not pan out.'
  echo 'Try again later.'
  exit 1
fi

echo '--------------------'
echo 'ls -l iso-downloaded'
ls -l iso-downloaded

echo '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++'
echo 'FINISHED STAGE 2B: downloading and verifying the ISO file'
echo '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++'

DATE2=$(date +%s)

echo '############################################################'
echo "FINISHED STAGE 2: downloading ISO ($((DATE2-DATE1)) seconds)"
echo '############################################################'
